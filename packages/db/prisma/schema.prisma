generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  name              String?
  emailVerified     DateTime?
  password          String?
  role              UserRole            @default(USER)
  image             String?
  Balance           Balance?
  OnRampTransaction OnRampTransaction[]
  sentTranfers      p2pTranfer[]        @relation("Sender")
  receivedTranfers  p2pTranfer[]        @relation("Receiver")
  accounts          Account[]
  userAccount       userAccount[]
}

model merchantAccount {
  id                  String @id @default(cuid())
  merchantId          String
  amount              Int    @default(0)     
  merchant            Merchant   @relation(fields: [merchantId], references: [id])
}
model userAccount {
  id                  String @id @default(cuid())
  userId              String
  amount              Int         @default(0)
  user                User   @relation(fields: [userId], references: [id])
}

model Account { 
  id                 String  @id @default(cuid()) @map("_id")
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Merchant {
  id    String @id @default(cuid())
  name  String
  email String @unique
  password String?
  merchantAccount  merchantAccount[]
}

model p2pTranfer {
  id         String @id @default(cuid())
  amount     Int
  senderId   String
  receiverId String
  startTime  DateTime
  sender     User   @relation("Sender", fields: [senderId], references: [id])
  receiver   User   @relation("Receiver", fields: [receiverId], references: [id])
}

model OnRampTransaction {
  id        String   @id @default(cuid())
  status    OnRamp
  token     String
  provider  String
  amount    Int
  startTime DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Balance {
  id     String @id @default(cuid())
  amount Int
  userId String @unique
  locked Int
  user   User   @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum UserRole {
  USER
  ADMIN
}

enum OnRamp {
  Success
  Failure
  Processing
}
